#When would you want to use a remote repository rather than keeping all your work
local?

A remote repository would be useful when access to one's personal computer is 
limited, or code has to be written away from a workstation. Cloud storage can be 
highly beneficial to diverse development environments.

#Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

It is logical to only allow for manual pulling of changes to users' local 
repositories because undesired changes may be made to code stored on GitHub. 
Forcing users to automatically pull all data from GitHub would eliminate the 
purpose of local repositories entirely.

#Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

Branches are different versions of the same project, and can be used to make 
risky modifications while maintaining a single master branch that operates as 
intended. Clones are repository copies that can be made either locally or 
remotely (from Github). Forks are essentially clones that are handled 
explicitly on GitHub's servers. The purpose of forks is to allow for various 
users to work on their own version(s) of other users' public directories.

#What is the benefit of having a copy of the last known state of the remote
stored locally?

Having the last known state of the remote stored locally would allow for 
local changes to be made to commits from the remote, regardless of whether or 
not that user has internet access.

#How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

Collaboration without Git or GitHub is possible in most cloud storage 
platforms, such as Google Drive or OneDrive. Seeing live changes to code or 
other documents would likely be easier without Git, but making sure things 
are properly written would certainly not be.

#When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

Making changes in separate branches, rather than directly changing the master 
branch, allows for different features to be tested and verified without the 
necessity of modifying existing, stable code.