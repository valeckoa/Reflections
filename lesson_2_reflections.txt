#What happens when you initialize a repository? Why do you need to do it?

Initializing a git repository allows for changes to be tracked in the direcory 
where initialization took place. This is crucial for making and reviewing 
commits.

#How is the staging area different from the working directory and the 
repository? What value do you think it offers?

The staging area, while holding files that have been modified in a similar 
fashion to a working directory, allows for users of Git to choose which files 
should be included in the next commit. A working directory contains all 
project files, regardless of whether they will be committed. The ability to 
distinguish which files should be committed is very useful because a user 
should always aim to keep the size of his or her commits low.

#How can you use the staging area to make sure you have one commit per 
logical change?

The staging area can be used to add singular files to the commit, so that 
large numbers of changes are not being committed at a time.

#What are some situations when branches would be helpful in keeping your 
history organized? How would branches help?

Branches can be useful when working on experimental versions of software, 
or versions of software that may become much different than the original 
master. Branches allow for fast switching between drastically different 
versions of the same application.

#How do the diagrams help you visualize the branch structure?

Diagrams can help to visualize Git's branch structure by demonstrating several 
things. For example, diagrams demonstrate the unidirectional flow of the 
history log, as all branches connect to parents. Additionally, diagrams can 
be used to easily visualize the inaccessibility of certain branches.